// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mcel2.domain;

import com.mcel2.domain.DiagnosysServices;
import com.mcel2.domain.DiagnosysServicesDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect DiagnosysServicesDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DiagnosysServicesDataOnDemand: @Component;
    
    private Random DiagnosysServicesDataOnDemand.rnd = new SecureRandom();
    
    private List<DiagnosysServices> DiagnosysServicesDataOnDemand.data;
    
    public DiagnosysServices DiagnosysServicesDataOnDemand.getNewTransientDiagnosysServices(int index) {
        DiagnosysServices obj = new DiagnosysServices();
        setDescription(obj, index);
        return obj;
    }
    
    public void DiagnosysServicesDataOnDemand.setDescription(DiagnosysServices obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public DiagnosysServices DiagnosysServicesDataOnDemand.getSpecificDiagnosysServices(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DiagnosysServices obj = data.get(index);
        Long id = obj.getId();
        return DiagnosysServices.findDiagnosysServices(id);
    }
    
    public DiagnosysServices DiagnosysServicesDataOnDemand.getRandomDiagnosysServices() {
        init();
        DiagnosysServices obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return DiagnosysServices.findDiagnosysServices(id);
    }
    
    public boolean DiagnosysServicesDataOnDemand.modifyDiagnosysServices(DiagnosysServices obj) {
        return false;
    }
    
    public void DiagnosysServicesDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = DiagnosysServices.findDiagnosysServicesEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DiagnosysServices' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DiagnosysServices>();
        for (int i = 0; i < 10; i++) {
            DiagnosysServices obj = getNewTransientDiagnosysServices(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
